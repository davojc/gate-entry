name: .NET Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: windows-latest
    permissions:
      contents: write # ðŸ‘ˆ Add this permission

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish .\GateEntry\GateEntry.csproj --configuration Release --runtime win-x64 --self-contained false --output ./publish

    # Remove unwanted runtimes
    - name: Prune Unwanted Runtimes from Publish Folder
      run: |
        $runtimesDir = "./publish/runtimes"
        if (Test-Path $runtimesDir) {
          Write-Host "Runtimes folder found. Pruning..."
          Get-ChildItem -Path $runtimesDir -Directory | Where-Object { $_.Name -ne 'win-x64' } | ForEach-Object {
            Write-Host "Deleting unwanted runtime folder: $($_.FullName)"
            Remove-Item -Path $_.FullName -Recurse -Force
          }
          Write-Host "Pruning complete."
        } else {
          Write-Host "No runtimes folder found, skipping pruning."
        }

    - name: Zip the release
      run: |
        $releaseName = "GateEntry-${{ github.ref_name }}"
        Compress-Archive -Path ./publish\* -DestinationPath ./gateentry.zip
        echo "RELEASE_NAME=$releaseName" >> $env:GITHUB_ENV

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}         # Use the pushed tag as the release tag
        release_name: Release ${{ github.ref }}  # Set the release name based on the tag
        draft: false
        prerelease: false

    - name: Upload Release Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gateentry.zip               # The path to the published output
        asset_name: gateentry.zip    # Rename the uploaded file
        asset_content_type: application/octet-stream

    - name: Upload Deploy Powershell Script
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./scripts/deploy.ps1               # The path to the published output
        asset_name: deploy.ps1     # Rename the uploaded file
        asset_content_type: text/x-powershell